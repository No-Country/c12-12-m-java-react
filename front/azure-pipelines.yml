trigger:
  branches:
    include:
      - develop
  paths:
    include:
      - front/*
    exclude:
      - back/*
pr: none

variables:
  npm_config_cache: $(Pipeline.Workspace)/.npm
  # Container registry service connection established during pipeline creation
  dockerfilePath: 'front/Dockerfile'
  buildTag: '$(Build.BuildId)'
  latestTag: 'latest'
  
pool:
  vmImage: ubuntu-latest

stages:
  - stage: 'Build'
    displayName: 'Build React App'
    jobs:
    - job: 'build'
      steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "16.x"
        displayName: "Install Node.js"

      - task: Cache@2
        inputs:
          key: 'front/package-lock.json'
          path: '$(npm_config_cache)'
          cacheHitVar: 'npm_variable_cache'

      - task: Npm@1
        inputs:
          command: 'custom'
          workingDir: 'front/'
          customCommand: 'ci --cache $(npm_config_cache)'
        displayName: "Install NPM"

      - script:  npm run build
        workingDirectory: $(Build.SourcesDirectory)/front/
        displayName: "Build App"
        timeoutInMinutes: 1
        failOnStderr: false

  - stage: 'Test'
    displayName: 'Test React App'
    jobs:
    - job: 'SonarCloud'
      steps:
      - checkout: self
        fetchDepth: 0
      - task: NodeTool@0
        inputs:
          versionSpec: "16.x"
        displayName: "Install Node.js"

      - task: Cache@2
        inputs:
          key: 'front/package-lock.json'
          path: '$(npm_config_cache)'
          cacheHitVar: 'npm_variable_cache'

      - task: Npm@1
        inputs:
          command: 'custom'
          workingDir: 'front/'
          customCommand: 'ci --cache $(npm_config_cache)'
        displayName: "Install NPM"

      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'SonarCloud'
          organization: 'vivavintage'
          scannerMode: 'CLI'
          configMode: 'manual'
          cliProjectKey: 'oka040370_vivavintage'
          cliProjectName: 'vivavintage'
          cliSources: './front'
        displayName: Prepare SonarCloud

      - script:  npm run build
        workingDirectory: $(Build.SourcesDirectory)/front/
        displayName: "Build App"
        timeoutInMinutes: 1
        failOnStderr: false

      - task: SonarCloudAnalyze@1

      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'
        displayName: SonarCloud

      displayName: Test App with React (SAST)

    - job: 'CurlTest'
      steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "16.x"
        displayName: "Install Node.js"

      - task: Cache@2
        inputs:
          key: 'front/package-lock.json'
          path: '$(npm_config_cache)'
          cacheHitVar: 'npm_variable_cache'
          
      - task: Npm@1
        inputs:
          command: 'custom'
          workingDir: 'front/'
          customCommand: 'ci --cache $(npm_config_cache)'
        displayName: "Install NPM"

      - script:  |
          npm run dev &
          sleep 4
          response=$(curl -X GET -s -o /dev/null -w "%{http_code}" http://localhost:3000)
          echo $response
          if [[ "$response" -eq 200 ]]; then
            echo "Request was successful"
          else
            echo "Request failed with status code $response"
            exit 1
          fi
        workingDirectory: $(Build.SourcesDirectory)/front/
        timeoutInMinutes: 1
        retryCountOnTaskFailure: 0
        displayName: "Test App with Curl"

  - stage: 'Release_Docker_Hub'
    displayName: 'Release into DockerHub'
    jobs:
    - job: 'releaseDockerHub'
      steps:
        - task: Docker@2
          inputs:
            containerRegistry: 'dockerhubRepository'
            repository: 'ovas04/front-vivavintage'
            command: 'buildAndPush'
            Dockerfile: '$(dockerfilePath)'
            buildContext: '$(System.DefaultWorkingDirectory)/front/'
            tags: |
              $(buildTag)
              $(latestTag)
          displayName: "Release Into DockerHub"
